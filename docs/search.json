[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "talks/test_talk.html#getting-up",
    "href": "talks/test_talk.html#getting-up",
    "title": "Stomatal Optimization under Uncertain Climate",
    "section": "Getting up",
    "text": "Getting up\nsubtitle\n\nTurn off alarm\nGet out of bed\n\n\\[\nx_{1,2} =\n\\frac{-b\\pm \\sqrt{b^2 -4ac}}{2a}\n\\]"
  },
  {
    "objectID": "talks/test_talk.html#breakfast",
    "href": "talks/test_talk.html#breakfast",
    "title": "Stomatal Optimization under Uncertain Climate",
    "section": "Breakfast",
    "text": "Breakfast\n\nEat eggs\nDrink coffeex"
  },
  {
    "objectID": "talks/test_talk.html#dinner",
    "href": "talks/test_talk.html#dinner",
    "title": "Stomatal Optimization under Uncertain Climate",
    "section": "Dinner",
    "text": "Dinner\n\n\nLeft column\n\n\nRight column"
  },
  {
    "objectID": "talks/test_talk.html#going-to-sleep",
    "href": "talks/test_talk.html#going-to-sleep",
    "title": "Stomatal Optimization under Uncertain Climate",
    "section": "Going to sleep",
    "text": "Going to sleep\n\nGet in bed\nCount sheep"
  },
  {
    "objectID": "talks/reactivity/react.html",
    "href": "talks/reactivity/react.html",
    "title": "reactivity",
    "section": "",
    "text": "\\[\n\\frac{dx}{dt} = ax\n\\]\nwhose solution is\n\\[\nx(t) = x_0 e^{at}\n\\]\n\n\nimport stuff\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport matplotlib.gridspec as gridspec\nfrom scipy.integrate import solve_ivp\nimport seaborn as sns\nsns.set_theme(style=\"ticks\", font_scale=1.5)  # white graphs, with large and legible letters\n# %matplotlib widget\n\n\n\n\n1d system\ndef equation_1d(a, x):\n    return [a * x]\n\n# parameters as a dictionary\na1 = -1.0\na2 = +0.3\n\ntmax=6\ndt=0.01\nx0 = 1.0\nt_eval = np.arange(0, tmax, dt)\n\n# solve the system\n\nsol1 = solve_ivp(lambda t, y: equation_1d(a1, y),\n                 [0, tmax], [x0], t_eval=t_eval)\nsol2 = solve_ivp(lambda t, y: equation_1d(a2, y),\n                 [0, tmax], [x0], t_eval=t_eval)\n\n\n\n\n\nnow let’s plot\n# learn how to configure:\n# http://matplotlib.sourceforge.net/users/customizing.html\nparams = {\n          'font.family': 'serif',\n          'ps.usedistiller': 'xpdf',\n          'text.usetex': True,\n          # include here any neede package for latex\n          'text.latex.preamble': r'\\usepackage{amsmath}',\n          'figure.dpi': 300\n          }\nplt.rcParams.update(params)\n# matplotlib.rcParams['text.latex.preamble'] = [\n#     r'\\usepackage{amsmath}',\n#     r'\\usepackage{mathtools}']\n\nfig, ax = plt.subplots()\n\nbright_color1 = \"xkcd:hot pink\"\nbright_color2 = \"xkcd:cerulean\"\n\nax.plot(sol2.t, sol2.y[0], color=bright_color2, lw=3, label=f'$a={a2}$')\nax.plot(sol1.t, sol1.y[0], color=bright_color1, lw=3, label=f'$a={a1}$')\n\n\nax.legend(loc='center right')\nax.set(xlim=[0,5.3],\n       ylim=[0,4.3],\n       xlabel='time',)\nax.set_ylabel(r'$x(t)$', labelpad=20, rotation=0)\n# only left and bottom spines\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\n\nax.plot(1, 0, \"&gt;k\", transform=ax.get_yaxis_transform(), clip_on=False)\nax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False)"
  },
  {
    "objectID": "talks/reactivity/react.html#a-1d-linear-dynamical-system",
    "href": "talks/reactivity/react.html#a-1d-linear-dynamical-system",
    "title": "reactivity",
    "section": "",
    "text": "\\[\n\\frac{dx}{dt} = ax\n\\]\nwhose solution is\n\\[\nx(t) = x_0 e^{at}\n\\]\n\n\nimport stuff\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport matplotlib.gridspec as gridspec\nfrom scipy.integrate import solve_ivp\nimport seaborn as sns\nsns.set_theme(style=\"ticks\", font_scale=1.5)  # white graphs, with large and legible letters\n# %matplotlib widget\n\n\n\n\n1d system\ndef equation_1d(a, x):\n    return [a * x]\n\n# parameters as a dictionary\na1 = -1.0\na2 = +0.3\n\ntmax=6\ndt=0.01\nx0 = 1.0\nt_eval = np.arange(0, tmax, dt)\n\n# solve the system\n\nsol1 = solve_ivp(lambda t, y: equation_1d(a1, y),\n                 [0, tmax], [x0], t_eval=t_eval)\nsol2 = solve_ivp(lambda t, y: equation_1d(a2, y),\n                 [0, tmax], [x0], t_eval=t_eval)\n\n\n\n\n\nnow let’s plot\n# learn how to configure:\n# http://matplotlib.sourceforge.net/users/customizing.html\nparams = {\n          'font.family': 'serif',\n          'ps.usedistiller': 'xpdf',\n          'text.usetex': True,\n          # include here any neede package for latex\n          'text.latex.preamble': r'\\usepackage{amsmath}',\n          'figure.dpi': 300\n          }\nplt.rcParams.update(params)\n# matplotlib.rcParams['text.latex.preamble'] = [\n#     r'\\usepackage{amsmath}',\n#     r'\\usepackage{mathtools}']\n\nfig, ax = plt.subplots()\n\nbright_color1 = \"xkcd:hot pink\"\nbright_color2 = \"xkcd:cerulean\"\n\nax.plot(sol2.t, sol2.y[0], color=bright_color2, lw=3, label=f'$a={a2}$')\nax.plot(sol1.t, sol1.y[0], color=bright_color1, lw=3, label=f'$a={a1}$')\n\n\nax.legend(loc='center right')\nax.set(xlim=[0,5.3],\n       ylim=[0,4.3],\n       xlabel='time',)\nax.set_ylabel(r'$x(t)$', labelpad=20, rotation=0)\n# only left and bottom spines\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\n\nax.plot(1, 0, \"&gt;k\", transform=ax.get_yaxis_transform(), clip_on=False)\nax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False)"
  },
  {
    "objectID": "talks/reactivity/react.html#the-simplest-2d-dynamical-system",
    "href": "talks/reactivity/react.html#the-simplest-2d-dynamical-system",
    "title": "reactivity",
    "section": "the simplest 2d dynamical system",
    "text": "the simplest 2d dynamical system\n\\[\\begin{align*}\n\\frac{dx_1}{dt} &= ax_1 + bx_2 \\\\\n\\frac{dx_2}{dt} &= cx_1 + dx_2\n\\end{align*}\\]\n…or in matrix form:\n\\[\n\\frac{d\\mathbf{x}}{dt} = M \\mathbf{x},\n\\] where \\(\\mathbf{x}=(x_1,x_2)\\) and \\(M = \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix}\\).\n\n\nsystem of equations\ndef system_equations_2d(p, x, y):\n    return [p['a'] * x + p['b'] * y,\n            p['c'] * x + p['d'] * y,\n           ]\n\n# parameters as a dictionary\nA0 = {'a': -1.0, 'b': +0.0,\n      'c': +0.0, 'd': -2.0}\nA1 = {'a': -1.0, 'b': +1.0,\n      'c': +0.0, 'd': -2.0}\nA2 = {'a': -1.0, 'b': +10,\n      'c': +0.0, 'd': -2.0}\n\n\n\n\nprepare streamplot and trajectories\nmin_x, max_x = [-3, 3]\nmin_y, max_y = [-3, 3]\ndiv = 50\nX, Y = np.meshgrid(np.linspace(min_x, max_x, div),\n                   np.linspace(min_y, max_y, div))\n\n# given initial conditions (x0,y0), simulate the trajectory of the system as ivp\ndef simulate_trajectory(p, x0, y0, tmax=10, dt=0.01):\n    t_eval = np.arange(0, tmax, dt)\n    sol = solve_ivp(lambda t, y: system_equations_2d(p, y[0], y[1]),\n                    [0, tmax], [x0, y0], t_eval=t_eval)\n    return sol\n\nt0a = simulate_trajectory(A0, 0, 1, 100)\nt0b = simulate_trajectory(A0, 1, 0, 100)\nt0c = simulate_trajectory(A0, 1, 1, 100)\nt1 = simulate_trajectory(A1, 0, 1, 100)\nt2 = simulate_trajectory(A2, 0, 1, 100)\n\n\n\n\nnow let’s plot\nfig, ax = plt.subplots()\n\ndensity = 2 * [1.0]\nminlength = 0.05\narrow_color = 3 * [0.7]\nbright_color1 = \"xkcd:hot pink\"\nbright_color2 = \"xkcd:cerulean\"\nbright_color3 = \"xkcd:goldenrod\"\n\n# make sure that each axes is square\nax.set_aspect('equal', 'box')\nax.streamplot(X, Y, system_equations_2d(A0, X, Y)[0], system_equations_2d(A0, X, Y)[1],\n              density=density, color=arrow_color, arrowsize=1.5,\n              linewidth=2,\n              minlength=minlength,\n              zorder=-10\n              )\nax.plot(t0a.y[0], t0a.y[1], color=bright_color1, lw=3)\nax.plot(t0b.y[0], t0b.y[1], color=bright_color2, lw=3)\nax.plot(t0c.y[0], t0c.y[1], color=bright_color3, lw=3)\nax.plot(t1.y[0][-1], t1.y[1][-1], 'o', color=3*[0.3], markersize=10)\n\n\n# make spines at the origin, put arrow at the end of the axis\nax_list = [ax]\nfor axx in ax_list:\n    axx.spines['left'].set_position('zero')\n    axx.spines['bottom'].set_position('zero')\n    axx.spines['right'].set_color('none')\n    axx.spines['top'].set_color('none')\n    axx.spines['left'].set_linewidth(1.0)\n    axx.spines['bottom'].set_linewidth(1.0)\n    axx.xaxis.set_ticks_position('bottom')\n    axx.yaxis.set_ticks_position('left')\n    axx.xaxis.set_tick_params(width=0.5)\n    axx.yaxis.set_tick_params(width=0.5)\n    # put arrow at the end of the axis\n    axx.plot(1, 0, \"&gt;k\", transform=axx.get_yaxis_transform(), clip_on=False)\n    axx.plot(0, 1, \"^k\", transform=axx.get_xaxis_transform(), clip_on=False)\n    axx.text(1, 0.55, r\"$x_1$\", transform=axx.transAxes, clip_on=False, bbox=dict(facecolor='white', edgecolor='white'))\n    axx.text(0.55, 1, r\"$x_2$\", transform=axx.transAxes, clip_on=False, bbox=dict(facecolor='white', edgecolor='white'))\n    # set limits\n    axx.set(xticks=[-3,3],\n                   yticks=[-1.5,1.5],\n                   xlim=[-1.5, 1.5],\n                   ylim=[-1.5, 1.5],)\n    # remove ticks from both axes\n    axx.tick_params(axis='both', which='both', length=0)\n\n# put on title the respective parameters as matrix, use latex equation\n# add pad to title to avoid overlap with x-axis\nax.set_title(r'$M_1=\\begin{bmatrix} -1 & 0 \\\\ 0 & -2 \\end{bmatrix}$', pad=40)\nplt.savefig(\"2d_system_0.png\")\n\n\n\n\n\n\n\n\n\n\n\nnow let’s plot\n# learn how to configure:\n# http://matplotlib.sourceforge.net/users/customizing.html\nparams = {\n          'font.family': 'serif',\n          'ps.usedistiller': 'xpdf',\n          'text.usetex': True,\n          # include here any neede package for latex\n          'text.latex.preamble': r'\\usepackage{amsmath}',\n          }\nplt.rcParams.update(params)\n# matplotlib.rcParams['text.latex.preamble'] = [\n#     r'\\usepackage{amsmath}',\n#     r'\\usepackage{mathtools}']\n\nfig = plt.figure(figsize=(10, 10))\ngs = gridspec.GridSpec(2, 2, width_ratios=[1,1], height_ratios=[1,1])\ngs.update(left=0.20, right=0.86,top=0.88, bottom=0.13, hspace=0.05, wspace=0.15)\n\nax0 = plt.subplot(gs[0, 0])\nax1 = plt.subplot(gs[0, 1])\nax2 = plt.subplot(gs[1, :])\n\ndensity = 2 * [0.80]\nminlength = 0.2\narrow_color = 3 * [0.7]\nbright_color1 = \"xkcd:hot pink\"\nbright_color2 = \"xkcd:cerulean\"\n\n# make sure that each axes is square\nax0.set_aspect('equal', 'box')\nax1.set_aspect('equal', 'box')\n\nax0.streamplot(X, Y, system_equations_2d(A1, X, Y)[0], system_equations_2d(A1, X, Y)[1],\n              density=density, color=arrow_color, arrowsize=1.5,\n              linewidth=2,\n              minlength=minlength,\n              zorder=-10\n              )\nax1.streamplot(X, Y, system_equations_2d(A2, X, Y)[0], system_equations_2d(A2, X, Y)[1],\n              density=density, color=arrow_color, arrowsize=1.5,\n              linewidth=2,\n              minlength=minlength,\n              zorder=-10\n              )\nax0.plot(t1.y[0], t1.y[1], color=bright_color1, lw=3)\nax1.plot(t2.y[0], t2.y[1], color=bright_color2, lw=3)\nax0.plot(t1.y[0][-1], t1.y[1][-1], 'o', color=bright_color1, markersize=10)\nax1.plot(t2.y[0][-1], t2.y[1][-1], 'o', color=bright_color2, markersize=10)\n\n# make spines at the origin, put arrow at the end of the axis\nax_list = [ax0, ax1]\nfor axx in ax_list:\n    axx.spines['left'].set_position('zero')\n    axx.spines['bottom'].set_position('zero')\n    axx.spines['right'].set_color('none')\n    axx.spines['top'].set_color('none')\n    axx.spines['left'].set_linewidth(1.0)\n    axx.spines['bottom'].set_linewidth(1.0)\n    axx.xaxis.set_ticks_position('bottom')\n    axx.yaxis.set_ticks_position('left')\n    axx.xaxis.set_tick_params(width=0.5)\n    axx.yaxis.set_tick_params(width=0.5)\n    # put arrow at the end of the axis\n    axx.plot(1, 0, \"&gt;k\", transform=axx.get_yaxis_transform(), clip_on=False)\n    axx.plot(0, 1, \"^k\", transform=axx.get_xaxis_transform(), clip_on=False)\n    axx.text(1, 0.55, r\"$x_1$\", transform=axx.transAxes, clip_on=False, bbox=dict(facecolor='white', edgecolor='white'))\n    axx.text(0.55, 1, r\"$x_2$\", transform=axx.transAxes, clip_on=False, bbox=dict(facecolor='white', edgecolor='white'))\n    # set limits\n    axx.set(xticks=[-3,3],\n                   yticks=[-3,3],\n                   xlim=[-3, 3],\n                   ylim=[-3, 3],)\n    # remove ticks from both axes\n    axx.tick_params(axis='both', which='both', length=0)\n\n# put on title the respective parameters as matrix, use latex equation\n# add pad to title to avoid overlap with x-axis\nax0.set_title(r'$M_1=\\begin{bmatrix} -1 & 1 \\\\ 0 & -2 \\end{bmatrix}$', pad=40)\nax1.set_title(r'$M_2=\\begin{bmatrix} -1 & 10 \\\\ 0 & -2 \\end{bmatrix}$', pad=40)\n\nL2_one = np.sqrt(t1.y[0]**2 + t1.y[1]**2)\nL2_two = np.sqrt(t2.y[0]**2 + t2.y[1]**2)\n\n\n# bottom plot\nax2.plot(t2.t, L2_two, color=bright_color2, lw=3, label='M2')\nax2.plot(t1.t, L2_one, color=bright_color1, lw=3, label='M1')\nax2.legend(loc='center')\nax2.set(xlim=[0,5.3],\n        ylim=[0,2.7],\n        yticks=[0,1,2],\n        xlabel='time',)\nax2.set_ylabel('distance from\\nthe origin\\n\\n' + r\"$\\lVert x\\rVert =\\sqrt{x_1^2+x_2^2}$\", labelpad=70, rotation=0)\n# only left and bottom spines\nax2.spines['right'].set_color('none')\nax2.spines['top'].set_color('none')\n\nax2.plot(1, 0, \"&gt;k\", transform=ax2.get_yaxis_transform(), clip_on=False)\nax2.plot(0, 1, \"^k\", transform=ax2.get_xaxis_transform(), clip_on=False)\n\n\n\n\n\n\n\n\n\nThe solution of the system of equation goes as follows:\n\\[\n\\frac{d\\mathbf{x}}{dt} = M \\mathbf{x} \\Rightarrow \\mathbf{x}(t) = e^{Mt} \\mathbf{x}_0\n\\]\nNow we need to compute the matrix exponential \\(e^{Mt}\\). If \\(M\\) is diagonalizable, then \\(M = PDP^{-1}\\), where \\(D\\) is a diagonal matrix with the eigenvalues of \\(M\\) on the diagonal and \\(P\\) is the matrix whose columns are the eigenvectors of \\(M\\):\n\\[\\begin{align*}\ne^{Mt} =&  e^{\\left(PDP^{-1}\\right)t} \\\\\n       =& P e^{Dt} P^{-1} \\\\\n       =& P \\begin{pmatrix} e^{\\lambda_1 t} & 0 \\\\ 0 & e^{\\lambda_2 t} \\end{pmatrix} P^{-1}\n\\end{align*}\\]\n\n\nWhy do the \\(P\\) matrices get off the exponential? Because\n\\[\\begin{align*}\ne^{Mt} &= I + PDP^{-1}t + \\frac{1}{2!}PD^2P^{-1}t^2 + \\ldots \\\\\n       &= P \\left( I + Dt + \\frac{1}{2!}D^2t^2  \\right)P^{-1} \\\\\n       &= P e^{Dt} P^{-1}\n\\end{align*}\\]\nand it is easy to show that\n\\[\ne^{Dt} = \\begin{pmatrix} e^{\\lambda_1 t} & 0 \\\\ 0 & e^{\\lambda_2 t} \\end{pmatrix}\n\\]\nLet’s compute the eigenvalues \\(M\\):\n\\[\\begin{align*}\n\\text{det}(M - \\lambda I) &= 0 \\\\\n\\text{det} \\left[\\begin{pmatrix} \\lambda_1 & c \\\\ 0 & \\lambda_2\\end{pmatrix} - \\begin{pmatrix} \\lambda & 0 \\\\ 0 & \\lambda\\end{pmatrix} \\right] &= 0 \\\\\n\\text{det} \\begin{pmatrix} \\lambda_1 - \\lambda & c \\\\ 0 & \\lambda_2 -\\lambda\\end{pmatrix} &= 0 \\\\\n(\\lambda_1 - \\lambda)(\\lambda_2 - \\lambda) &= 0 \\\\\n\\text{therefore } \\lambda &= \\lambda_1 \\text{ or } \\lambda = \\lambda_2\n\\end{align*}\\]\nNow the eigenvector of \\(\\lambda_1\\):\n\\[\\begin{align*}\nM \\mathbf{v} &= \\lambda_1 \\mathbf{v} \\\\\n\\begin{pmatrix} \\lambda_1 & c \\\\ 0 & \\lambda_2 \\end{pmatrix} \\begin{pmatrix} v_1 \\\\ v_2 \\end{pmatrix} &= \\lambda_1 \\begin{pmatrix} v_1 \\\\ v_2 \\end{pmatrix} \\\\\n\\text{yielding } \\lambda_1 v_1 + c v_2 &=  \\lambda_1 v_1 \\\\\n\\lambda_2 v_2 &= \\lambda_2 v_2 \\\\\n\\text{therefore } \\mathbf{v} &= \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix} \\\\\n\\end{align*}\\]\nNow the eigenvector of \\(\\lambda_2\\):\n\\[\\begin{align*}\nM \\mathbf{u} &= \\lambda_2 \\mathbf{u} \\\\\n\\begin{pmatrix} \\lambda_1 & c \\\\ 0 & \\lambda_2 \\end{pmatrix} \\begin{pmatrix} u_1 \\\\ u_2 \\end{pmatrix} &= \\lambda_2 \\begin{pmatrix} u_1 \\\\ u_2 \\end{pmatrix} \\\\\n\\text{yielding } \\lambda_1 u_1 + c u_2 &=  \\lambda_2 u_1 \\\\\n\\lambda_2 u_2 &= \\lambda_2 u_2 \\\\\n\\text{therefore } \\mathbf{u} &= \\begin{pmatrix} c \\\\ \\lambda_2-\\lambda_1 \\end{pmatrix} \\\\\n\\end{align*}\\]\nFinally, we found that the matrix \\(P\\) is:\n\\[\nP = \\begin{pmatrix} 1 & c \\\\ 0 & \\lambda_2-\\lambda_1 \\end{pmatrix}\n\\]\nWe need \\(P^{-1}\\), but it’s not fun to compute inverse matrices. In the case where \\(\\lambda_1=-1\\) and \\(\\lambda_2=-2\\), we have:\n\\[\nP = \\begin{pmatrix} 1 & c \\\\ 0 & -1 \\end{pmatrix}\n\\]\nNow we’re lucky, because it’s easy to see that \\(P\\) is its own inverse (it’s called an involutory matrix):\n\\[\nPP^{-1} = I \\implies \\begin{pmatrix} 1 & c \\\\ 0 & -1 \\end{pmatrix}\\begin{pmatrix} 1 & c \\\\ 0 & -1 \\end{pmatrix} = \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix}_\\blacksquare\n\\]\nFinally, we have:\n\\[\\begin{align*}\n\\mathbf{x}(t) &= \\mathbf{x}_0 e^{Mt} = \\begin{pmatrix} 1 & c \\\\ 0 & -1 \\end{pmatrix} \\begin{pmatrix} e^{-t} & 0 \\\\ 0 & e^{-2t} \\end{pmatrix} \\begin{pmatrix} 1 & c \\\\ 0 & -1 \\end{pmatrix} \\mathbf{x}_0 \\\\\n              &= \\begin{pmatrix} e^{-t} & ce^{-2t} \\\\ 0 & -e^{-2t} \\end{pmatrix} \\begin{pmatrix} 1 & c \\\\ 0 & -1 \\end{pmatrix} \\mathbf{x}_0 \\\\\n              &= \\begin{pmatrix} e^{-t} & ce^{-t}-ce^{-2t} \\\\ 0 & e^{-2t} \\end{pmatrix} \\mathbf{x}_0 \\\\\n              &= \\begin{pmatrix} e^{-t} & ce^{-t}-ce^{-2t} \\\\ 0 & e^{-2t} \\end{pmatrix}  \\begin{pmatrix} x_{01} \\\\ x_{02} \\end{pmatrix} \\\\\n       x_1(t) &= x_{01}\\, e^{-t} + c\\, x_{02} (e^{-t} - e^{-2t}) \\\\\n       x_2(t) &= x_{02}\\, e^{-2t}\n\\end{align*}\\]\n\nThe question arises whether asymptotic behavior adequately characterizes the response to perturbations. Because of the short duration of many ecological experiments, transients may dominate the observed responses to perturbations. In addition, transient responses may be at least as important as asymptotic responses. Managers charged with ecosystem restoration, for example, are likely to be interested in both the short-term and long-term effects of their manipulations, particularly if the short-term effects can be large.\n\nSource: Neubert & Caswell, 1997, Ecology"
  },
  {
    "objectID": "talks/reactivity/react.html#reactivity",
    "href": "talks/reactivity/react.html#reactivity",
    "title": "reactivity",
    "section": "Reactivity",
    "text": "Reactivity\nSource: Neubert, M. G., & Caswell, H. (1997). Alternatives to resilience for measuring the responses of ecological systems to perturbations. Ecology, 78(3), 653-665.\nThe reactivity is defined as the (normalized) maximum rate of change of the norm of the state vector \\(\\mathbf{x}\\), for all nonzero initial conditions:\n\\[\n\\sigma \\equiv \\max_{x_0\\neq0} \\left[ \\left( \\frac{1}{\\lVert\\mathbf{x}\\rVert} \\frac{d\\lVert\\mathbf{x}\\rVert}{dt} \\right)\\Bigg|_{t=0} \\right]\n\\]\nLet’s play with this definition and see what we get.\n\\[\\begin{align*}\n\\frac{d\\lVert\\mathbf{x}\\rVert}{dt} &= \\frac{d\\sqrt{\\mathbf{x}^T\\mathbf{x}}}{dt} \\\\\n                                   &= \\frac{1}{2}\\left( \\mathbf{x}^T\\mathbf{x} \\right)^{-1/2} \\frac{d}{dt}\\left(\\mathbf{x}^T\\mathbf{x}\\right) \\\\\n                                   &= \\frac{1}{2\\lVert\\mathbf{x}\\rVert}\\left[ \\mathbf{x}^T \\frac{d\\mathbf{x}}{dt} + \\left(\\frac{d\\mathbf{x}}{dt}\\right)^T \\mathbf{x} \\right] \\\\\n                                   &= \\frac{\\mathbf{x}^T A \\mathbf{x} + \\mathbf{x}^T A^T \\mathbf{x}}{2\\lVert\\mathbf{x}\\rVert} \\\\\n                                   &= \\frac{\\mathbf{x}^T \\left( A + A^T \\right) \\mathbf{x}}{2\\lVert\\mathbf{x}\\rVert}\n\\end{align*}\\]\nThe matrix\n\\[\nH(A) = \\frac{A + A^T}{2}\n\\]\nis called the Hermitian (symmetric) part of \\(A\\).\nThe reactivity is then \\[\n\\sigma = \\max_{\\mathbf{x}\\neq0} \\left[ \\frac{\\mathbf{x}^T H(A) \\mathbf{x}}{\\lVert\\mathbf{x}\\rVert^2} \\right]_{t=0}\n\\]\n\\[\n\\sigma = \\lambda_{\\text{max}}(H(A))\n\\]"
  },
  {
    "objectID": "talks/models.html#scale-models",
    "href": "talks/models.html#scale-models",
    "title": "Models",
    "section": "Scale models",
    "text": "Scale models"
  },
  {
    "objectID": "talks/models.html#yairs-fun-etymology-break-model",
    "href": "talks/models.html#yairs-fun-etymology-break-model",
    "title": "Models",
    "section": "Yair’s fun etymology break: model",
    "text": "Yair’s fun etymology break: model\n\n\n\n\n\n\nlatin\n\n\nmodus = measure\ndiminutive modulus = measure, standard\n\n\n\n\n\n\n\n\nvulgar latin\n\n\nword becomes modellus\n\n\n\n\n\n\n\n\nold french\n\n\nmodelle\n\n\n\n\n\n\n\n\n\noriginally\n\n\nsmall-scale representation or a standard to be imitated or followed\n\n\n\n\n\n\n\n\nfashion\n\n\nhuman figures to showcase garments or products\n\n\n\n\n\n\n\n\nscience\n\n\nsimplified representations of real-world systems"
  },
  {
    "objectID": "talks/models.html#analogical-models",
    "href": "talks/models.html#analogical-models",
    "title": "Models",
    "section": "Analogical models",
    "text": "Analogical models"
  },
  {
    "objectID": "talks/models.html#idealized-models",
    "href": "talks/models.html#idealized-models",
    "title": "Models",
    "section": "Idealized models",
    "text": "Idealized models\n\n\n\nAristotelian idealization: neglect stuff\n\n mass\n length\n color\n material\n\n\n\nGalilean idealization: distort stuff\n\n point-like mass\n massless string\n no friction"
  },
  {
    "objectID": "talks/models.html#toy-models-minimal-models",
    "href": "talks/models.html#toy-models-minimal-models",
    "title": "Models",
    "section": "Toy models + Minimal models",
    "text": "Toy models + Minimal models"
  },
  {
    "objectID": "talks/models.html#phenomenological-models",
    "href": "talks/models.html#phenomenological-models",
    "title": "Models",
    "section": "Phenomenological models",
    "text": "Phenomenological models\n\n observable properties\n hidden mechanisms\n\n\n\n\n\n\nSpeaker notes go here."
  },
  {
    "objectID": "talks/models.html#exploratory-models",
    "href": "talks/models.html#exploratory-models",
    "title": "Models",
    "section": "Exploratory models",
    "text": "Exploratory models\n starting point of further explorations\n proofs-of-principle\n specific target system\n particular experimentally established phenomenon"
  },
  {
    "objectID": "talks/models.html#models-of-data",
    "href": "talks/models.html#models-of-data",
    "title": "Models",
    "section": "Models of data",
    "text": "Models of data\n\n data cleaning\n data munging\n smoothing, etc\n\n# exclude rows with missing values\ndf.dropna()\n# resample into daily freq, take average, and forward fill gaps\ndf.resample('D').mean().ffill()\n# 7-day running average\ndf.rolling(7, center=True).mean()"
  },
  {
    "objectID": "talks/models.html#explanations",
    "href": "talks/models.html#explanations",
    "title": "Models",
    "section": "Explanations",
    "text": "Explanations\n\nSome models explain. But how can they fulfill this function given that they typically involve idealizations? Do these models explain despite or because of the idealizations they involve? And what kind of explanation do models provide?"
  },
  {
    "objectID": "talks/models.html#causality",
    "href": "talks/models.html#causality",
    "title": "Models",
    "section": "Causality",
    "text": "Causality\n\n\nthe causal relations between facts or processes does the explanatory work\n\nexplanations:\ninformation about patterns of counterfactual dependence between what is explaining and what is being explained\n\n\n\n\n\nenable us to see what sort of difference it would have made for the explanandum if the factors cited in the explanans had been different in various possible ways."
  },
  {
    "objectID": "talks/AI_academy.html#who-said-that-regading-what",
    "href": "talks/AI_academy.html#who-said-that-regading-what",
    "title": "AI tools for the academy",
    "section": "Who said that? Regading what?",
    "text": "Who said that? Regading what?\n\n\n…this innovation will create forgetfulness in the learners’ souls, because they will not use their memories;\nit gives not truth, but only the appearance of truth;\nthe students will be hearers of many things and will have learned nothing;\nthey will appear to be omniscient and will generally know nothing, having the show of wisdom without the reality.\n\n\n\nSocrates, 5th century BCE, about WRITING"
  },
  {
    "objectID": "talks/AI_academy.html#future-of-email-assignments-essays",
    "href": "talks/AI_academy.html#future-of-email-assignments-essays",
    "title": "AI tools for the academy",
    "section": "Future of email / assignments / essays",
    "text": "Future of email / assignments / essays"
  },
  {
    "objectID": "talks/AI_academy.html#future-of-email-assignments-essays-1",
    "href": "talks/AI_academy.html#future-of-email-assignments-essays-1",
    "title": "AI tools for the academy",
    "section": "Future of email / assignments / essays",
    "text": "Future of email / assignments / essays"
  },
  {
    "objectID": "talks/AI_academy.html#writing-well-thinking-well",
    "href": "talks/AI_academy.html#writing-well-thinking-well",
    "title": "AI tools for the academy",
    "section": "writing well ≠ thinking well",
    "text": "writing well ≠ thinking well\n\nGonzalo Frasca"
  },
  {
    "objectID": "talks/index.html",
    "href": "talks/index.html",
    "title": "Talks",
    "section": "",
    "text": "let’s see what happens"
  },
  {
    "objectID": "talks/AI-2025/index.html#sora.com-5-minutes-of-play",
    "href": "talks/AI-2025/index.html#sora.com-5-minutes-of-play",
    "title": "Give AI the stuff you don’t wanna do",
    "section": "sora.com, 5 minutes of play",
    "text": "sora.com, 5 minutes of play\n\n\nin a bucolic farm, we see a zoo, where all the animals are living origami creatures in the style of Robert Lang’s creations. the animals move and are each the size of a car: elephant, t-rex, moose, praying mantis"
  },
  {
    "objectID": "talks/AI-2025/index.html#ethan-mollicks-book",
    "href": "talks/AI-2025/index.html#ethan-mollicks-book",
    "title": "Give AI the stuff you don’t wanna do",
    "section": "Ethan Mollick’s book",
    "text": "Ethan Mollick’s book"
  },
  {
    "objectID": "talks/AI-2025/index.html#ethan-mollicks-book-1",
    "href": "talks/AI-2025/index.html#ethan-mollicks-book-1",
    "title": "Give AI the stuff you don’t wanna do",
    "section": "Ethan Mollick’s book",
    "text": "Ethan Mollick’s book"
  },
  {
    "objectID": "talks/AI-2025/index.html#ethan-mollick",
    "href": "talks/AI-2025/index.html#ethan-mollick",
    "title": "Give AI the stuff you don’t wanna do",
    "section": "Ethan Mollick",
    "text": "Ethan Mollick"
  },
  {
    "objectID": "talks/AI-2025/index.html#ethan-mollick-1",
    "href": "talks/AI-2025/index.html#ethan-mollick-1",
    "title": "Give AI the stuff you don’t wanna do",
    "section": "Ethan Mollick",
    "text": "Ethan Mollick"
  },
  {
    "objectID": "talks/AI-2025/index.html#co-intelligence",
    "href": "talks/AI-2025/index.html#co-intelligence",
    "title": "Give AI the stuff you don’t wanna do",
    "section": "Co-Intelligence",
    "text": "Co-Intelligence\n\nThe idea of using AI as a collaborator to achieve a human goal."
  },
  {
    "objectID": "talks/AI-2025/index.html#co-intelligent-principles",
    "href": "talks/AI-2025/index.html#co-intelligent-principles",
    "title": "Give AI the stuff you don’t wanna do",
    "section": "4 co-intelligent principles",
    "text": "4 co-intelligent principles"
  },
  {
    "objectID": "talks/AI-2025/index.html#always-invite-ai-to-the-table",
    "href": "talks/AI-2025/index.html#always-invite-ai-to-the-table",
    "title": "Give AI the stuff you don’t wanna do",
    "section": "always invite AI to the table",
    "text": "always invite AI to the table"
  },
  {
    "objectID": "talks/AI-2025/index.html#always-invite-ai-to-the-table-1",
    "href": "talks/AI-2025/index.html#always-invite-ai-to-the-table-1",
    "title": "Give AI the stuff you don’t wanna do",
    "section": "always invite AI to the table",
    "text": "always invite AI to the table\n\n\nWhat is the best next move for ?\n\n\nWrite a full JavaScript webpage to play tic-tac-toe against the computer; it needs to be completely working code. Here are the rules:\n\nThe computer goes first.\nThe person clicks on squares to make their move.\nThe computer should play perfectly and so never lose.\nIf someone wins, then say who won."
  },
  {
    "objectID": "talks/AI-2025/index.html#always-invite-ai-to-the-table-2",
    "href": "talks/AI-2025/index.html#always-invite-ai-to-the-table-2",
    "title": "Give AI the stuff you don’t wanna do",
    "section": "always invite AI to the table",
    "text": "always invite AI to the table\n\nIdentify the Jagged Frontier of AI.\n Learn the AI’s strengths and weaknesses through continuous experimentation."
  },
  {
    "objectID": "talks/AI-2025/index.html#be-the-human-in-the-loop",
    "href": "talks/AI-2025/index.html#be-the-human-in-the-loop",
    "title": "Give AI the stuff you don’t wanna do",
    "section": "be the human in the loop",
    "text": "be the human in the loop"
  },
  {
    "objectID": "talks/AI-2025/index.html#be-the-human-in-the-loop-1",
    "href": "talks/AI-2025/index.html#be-the-human-in-the-loop-1",
    "title": "Give AI the stuff you don’t wanna do",
    "section": "be the human in the loop",
    "text": "be the human in the loop\nYou need to provide\n\n\ncrucial oversight\nyour unique perspective\ncritical thinking skills\nethical considerations\n\n\nBeware of hallucinations or of the AI wanting to give you BS answers just to keep you happy."
  },
  {
    "objectID": "talks/AI-2025/index.html#treat-ai-like-a-person",
    "href": "talks/AI-2025/index.html#treat-ai-like-a-person",
    "title": "Give AI the stuff you don’t wanna do",
    "section": "treat AI like a person",
    "text": "treat AI like a person\n(but tell it what kind of person it is)"
  },
  {
    "objectID": "talks/AI-2025/index.html#assume-this-is-the-worst-ai-you-will-ever-use",
    "href": "talks/AI-2025/index.html#assume-this-is-the-worst-ai-you-will-ever-use",
    "title": "Give AI the stuff you don’t wanna do",
    "section": "assume this is the worst AI you will ever use",
    "text": "assume this is the worst AI you will ever use"
  },
  {
    "objectID": "talks/AI-2025/index.html#assume-this-is-the-worst-ai-you-will-ever-use-1",
    "href": "talks/AI-2025/index.html#assume-this-is-the-worst-ai-you-will-ever-use-1",
    "title": "Give AI the stuff you don’t wanna do",
    "section": "assume this is the worst AI you will ever use",
    "text": "assume this is the worst AI you will ever use\n\n“Otter on a plane using wifi”, November 2022"
  },
  {
    "objectID": "talks/AI-2025/index.html#assume-this-is-the-worst-ai-you-will-ever-use-2",
    "href": "talks/AI-2025/index.html#assume-this-is-the-worst-ai-you-will-ever-use-2",
    "title": "Give AI the stuff you don’t wanna do",
    "section": "assume this is the worst AI you will ever use",
    "text": "assume this is the worst AI you will ever use\n\n“Otter on a plane using wifi”, August 2024 (+22 months)"
  },
  {
    "objectID": "talks/AI-2025/index.html#if-you-dont-wanna-read-the-book",
    "href": "talks/AI-2025/index.html#if-you-dont-wanna-read-the-book",
    "title": "Give AI the stuff you don’t wanna do",
    "section": "If you don’t wanna read the book…",
    "text": "If you don’t wanna read the book…\n(though you should, it’s quite good)\n … you can read a few blog posts by Mollick"
  },
  {
    "objectID": "talks/AI-2025/index.html#voice-mode",
    "href": "talks/AI-2025/index.html#voice-mode",
    "title": "Give AI the stuff you don’t wanna do",
    "section": " Voice mode",
    "text": "Voice mode\nlive chat:\n\nChat about something you want to learn about\n\n\n\nHave your kids use it for homework\n\n\n\nvoice input instead of text input:\n\nWhen you’re not sure how to explain something, just talk to it. Give it your random thoughts and the AI will return a sensible paragraph to you"
  },
  {
    "objectID": "talks/AI-2025/index.html#transcribe-hand-written-text",
    "href": "talks/AI-2025/index.html#transcribe-hand-written-text",
    "title": "Give AI the stuff you don’t wanna do",
    "section": " Transcribe hand-written text",
    "text": "Transcribe hand-written text"
  },
  {
    "objectID": "talks/AI-2025/index.html#transcribe-hand-written-text-1",
    "href": "talks/AI-2025/index.html#transcribe-hand-written-text-1",
    "title": "Give AI the stuff you don’t wanna do",
    "section": " Transcribe hand-written text",
    "text": "Transcribe hand-written text"
  },
  {
    "objectID": "talks/AI-2025/index.html#transcribe-hand-written-text-2",
    "href": "talks/AI-2025/index.html#transcribe-hand-written-text-2",
    "title": "Give AI the stuff you don’t wanna do",
    "section": " Transcribe hand-written text",
    "text": "Transcribe hand-written text\nDownload PDF file."
  },
  {
    "objectID": "talks/AI-2025/index.html#its-better-to-use-code",
    "href": "talks/AI-2025/index.html#its-better-to-use-code",
    "title": "Give AI the stuff you don’t wanna do",
    "section": " It’s better to use code",
    "text": "It’s better to use code\nRight now, there is no good way of exporting to proprietary formats, e.g. Word, Excel, etc.\nYou can use instead\n\n\nmarkdown\nLaTeX\nother Open Source formats"
  },
  {
    "objectID": "talks/AI-2025/index.html#integration-is",
    "href": "talks/AI-2025/index.html#integration-is",
    "title": "Give AI the stuff you don’t wanna do",
    "section": "Integration is ",
    "text": "Integration is \n\n\nGitHub Copilot  + VS Code \nGemini  + Google apps   …\nChatGPT Canvas \nAdobe Firefly  + Photoshop \nAdobe Firefly Video  + Premiere Pro \ntell me your own experience"
  },
  {
    "objectID": "talks/AI-2025/index.html#the-in-the-room",
    "href": "talks/AI-2025/index.html#the-in-the-room",
    "title": "Give AI the stuff you don’t wanna do",
    "section": "The  in the room",
    "text": "The  in the room\nWe did not discuss today is the impact of generative AI on learning\n\n\n reading\n writing\n programming\n…\n thinking"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Talks and Posters",
    "section": "",
    "text": "AI tools for the academy\noptimal control\nmodels\nirreversible salinization\nHUJI agri\nreactivity\nAI-2025"
  }
]